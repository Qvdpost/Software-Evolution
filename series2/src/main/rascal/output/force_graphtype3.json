{"nodes":[{"id":"&emsp;{<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;&emsp;st.execute(\"DELETE FROM \" + tableName);<br />&emsp;&emsp;&emsp;st.close();<br />&emsp;&emsp;}catch(Exception e){/* ignore it */}<br />&emsp;}","group":1},{"id":"&emsp;{\t\t\t<br />\t\t\tcon.setAutoCommit(false);<br />\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br />\t\t\tassertRowCount( 0, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br />\t\t\tassertRowCount( 1, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br />\t\t\tassertRowCount( 2, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions Select * From transactions\");<br />\t\t\tassertRowCount( 4, \"Select * from transactions\");<br />\t\t\t<br />\t\t\tcon.commit();<br />\t\t\tassertRowCount( 4, \"Select * from transactions\");<br />\t\t\t<br />\t\t}","group":1},{"id":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tLong oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by bi\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = (Long)rs.getObject(\"bi\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = (Long)rs.getObject(\"bi\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tassertTrue( oldValue.compareTo( (Long)rs.getObject(\"bi\") ) < 0 );<br />\t\t\toldValue = (Long)rs.getObject(\"bi\");<br />\t\t\tcount++;<br />\t\t}<br />\t\tassertEquals( valueCount, count );<br />\t}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;Connection con = AllTests.getConnection();<br />&emsp;&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;&emsp;st.execute(\"drop table \" + table);<br />&emsp;&emsp;&emsp;st.close();<br />&emsp;&emsp;}catch(Throwable e){<br />&emsp;&emsp;&emsp;//e.printStackTrace();<br />&emsp;&emsp;}<br />&emsp;}","group":1},{"id":"&emsp;{<br />\t&emsp;&emsp;&emsp;pr.setBytes (  1, byteArray );<br />\t&emsp;&emsp;&emsp;pr.setString(  2 , \"Test\" );<br />\t&emsp;&emsp;&emsp;pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br />\t&emsp;&emsp;&emsp;pr.setFloat (  4, (float)1234.56789 );<br />\t&emsp;&emsp;&emsp;pr.setFloat (  5 , (float)9876.54321 );<br />\t&emsp;&emsp;&emsp;pr.setBytes (  6, largeByteArray );<br />\t&emsp;&emsp;&emsp;pr.setInt   (  7 , i );<br />\t&emsp;&emsp;&emsp;pr.setDouble(  8 , 23.45 );<br />\t&emsp;&emsp;&emsp;pr.setDouble(  9 , 567.45 );<br />\t&emsp;&emsp;&emsp;pr.setFloat (  10 , (float)78.89 );<br />\t&emsp;&emsp;&emsp;pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br />\t&emsp;&emsp;&emsp;pr.setShort (  12, (short)23456 );<br />\t&emsp;&emsp;&emsp;pr.setFloat (  13, (float)34.56 );<br />\t&emsp;&emsp;&emsp;pr.setString(  14, \"sysname (30) NULL\" );<br />\t&emsp;&emsp;&emsp;pr.setString(  15 , \"text NULL\" );<br />\t&emsp;&emsp;&emsp;pr.setByte  (  16, (byte)28 );<br />\t&emsp;&emsp;&emsp;pr.setBytes (  17, byteArray );<br />\t&emsp;&emsp;&emsp;pr.setString(  18, \"varchar (255) NULL\" );<br />\t&emsp;&emsp;&emsp;pr.setInt   (  19 , i );<br />&emsp;&emsp;&emsp;&emsp;int updateCount = pr.executeUpdate();<br />&emsp;&emsp;&emsp;&emsp;if (updateCount != 1){<br />&emsp;&emsp;&emsp;&emsp;&emsp;System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br />&emsp;&emsp;&emsp;&emsp;&emsp;return;<br />&emsp;&emsp;&emsp;&emsp;}<br />&emsp;&emsp;&emsp;}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;&emsp;if(raFile != null)<br />&emsp;&emsp;&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;&emsp;&emsp;raFile.close();<br />&emsp;&emsp;&emsp;&emsp;}catch(Exception e2){<br />&emsp;&emsp;&emsp;&emsp;&emsp;DriverManager.println(e2.toString());<br />&emsp;&emsp;&emsp;&emsp;}<br />&emsp;&emsp;&emsp;throw SmallSQLException.createFromException(e);<br />&emsp;&emsp;}","group":1},{"id":"&emsp;{<br />&emsp;\tif(init) return;<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tdropTable( con, \"statement\");<br />\t\tst.execute(\"Create Table statement (c varchar(30), i counter)\");<br />\t\tinit = true;<br />&emsp;}","group":1},{"id":"&emsp;{\t\t\t<br />\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br />\t\t\tassertRowCount( 0, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br />\t\t\tassertRowCount( 1, \"Select * from transactions\");<br /><br />\t\t\tcon.setAutoCommit(false);<br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br />\t\t\tassertRowCount( 2, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br />\t\t\tassertRowCount( 4, \"Select * from transactions\");<br />\t\t\t<br />\t\t\tcon.rollback();<br />\t\t\tassertRowCount( 1, \"Select * from transactions\");<br />\t\t\t<br />\t\t}","group":1},{"id":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tString oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = rs.getString(\"v\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(oldValue != null && rs.next()){<br />\t\t\tString newValue = rs.getString(\"v\");<br />\t\t\tif(newValue != null){<br />\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );<br />\t\t\t\tcount++;<br />\t\t\t}<br />\t\t\toldValue = newValue;<br />\t\t}<br />\t\tassertNull(oldValue);<br />\t\tassertFalse( rs.next() );<br /><br />\t\tassertEquals( valueCount, count );<br />\t}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;&emsp;String type2 = rs.getString(\"TABLE_TYPE\");<br />&emsp;&emsp;&emsp;assertTrue( type+\"-\"+type2, type.compareTo(type2)<0);<br />&emsp;&emsp;&emsp;type = type2;<br />&emsp;&emsp;&emsp;count++;<br />&emsp;&emsp;}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;Connection con = AllTests.getConnection();<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;&emsp;st.execute(\"Create Table DuplicatedColumn(col INT)\");<br />&emsp;&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;&emsp;st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");<br />&emsp;&emsp;&emsp;&emsp;fail(\"SQLException 'Duplicated Column' should be throw\");<br />&emsp;&emsp;&emsp;}catch(SQLException e){<br />&emsp;&emsp;&emsp;&emsp;assertSQLException(\"01000\", 0, e);<br />&emsp;&emsp;&emsp;}<br />&emsp;&emsp;}finally{<br />&emsp;&emsp;&emsp;dropTable(con, \"DuplicatedColumn\");<br />&emsp;&emsp;}<br />&emsp;}","group":1},{"id":"&emsp;{<br />\t\t\tfor(int i=0; i<places; i++){<br />\t\t\t\tfactor *= 10;<br />\t\t\t}<br />\t\t\tvalue *= factor;<br />\t\t}","group":1},{"id":"&emsp;{<br />\t\t\tassertTrue( oldValue.compareTo( rs.getString(\"v\") ) < 0 );<br />\t\t\toldValue = rs.getString(\"v\");<br />\t\t\tcount++;<br />\t\t}","group":1},{"id":"&emsp;{\t\t\t<br />\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br />\t\t\tassertRowCount( 0, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br /><br />\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)<br />\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where v = 'qwert'\");<br />\t\t\t<br />\t\t\trs.moveToInsertRow();<br />\t\t\trs.updateString(\"v\", \"qwert\");<br />\t\t\trs.insertRow();<br />\t\t\t<br />\t\t\trs.beforeFirst();<br />\t\t\tassertTrue( rs.next() );<br />\t\t\tassertEquals(\"qwert\", rs.getString(\"v\"));<br />\t\t\tassertFalse( rs.next() );<br />\t\t}","group":1},{"id":"&emsp;{<br />\t\t\tfor(int i=0; i>places; i--){<br />\t\t\t\tfactor *= 10;<br />\t\t\t}<br />\t\t\tvalue /= factor;<br />\t\t}","group":1},{"id":"&emsp;{<br />\t\t\ttry{<br />\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");<br />\t\t\t}catch(Throwable e){e.printStackTrace();}<br />\t\t\tcon.setAutoCommit(true);<br />\t\t}","group":1},{"id":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tPreparedStatement pr = con.prepareStatement(\"Select count(*) FROM \" + table1 + \" Group By name Order By name DESC\");<br />\t\tfor(int i=1; i<=3; i++){<br />\t\t\tResultSet rs = pr.executeQuery( );<br />\t\t\tassertTrue  ( \"loop:\"+i, rs.next());<br />\t\t\tassertEquals( \"loop:\"+i, 1, rs.getInt(1));<br />\t\t\tassertTrue  ( \"loop:\"+i, rs.next());<br />\t\t\tassertEquals( \"loop:\"+i, 3, rs.getInt(1));<br />\t\t}<br />\t}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;&emsp;&emsp;&emsp;failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);<br />&emsp;&emsp;&emsp;&emsp;&emsp;failed.initCause(ex);<br />&emsp;&emsp;&emsp;&emsp;}","group":1},{"id":"&emsp;{<br />\t\t\tString newValue = rs.getString(\"c2\");<br />\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );<br />\t\t\toldValue = newValue;<br />\t\t\tcount++;<br />\t\t}","group":1},{"id":"&emsp;{<br />\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){<br />\t\t\t\t\t\t\tlevel++;<br />\t\t\t\t\t\t\tnodeStack.push(<br />\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, <br />\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), <br />\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));<br />\t\t\t\t\t\t\tcontinue;<br />\t\t\t\t\t\t}else<br />\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);<br />\t\t\t\t\t}<br />\t\t\t\t\t//There is no RowOffset in this node","group":1},{"id":"&emsp;{<br />&emsp;&emsp;&emsp;&emsp;// simple Long Value<br />&emsp;&emsp;&emsp;&emsp;long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);<br />&emsp;&emsp;&emsp;&emsp;return temp / scaleFloatFactor[scale] * signum;<br />&emsp;&emsp;&emsp;}","group":1},{"id":"&emsp;{<br />\t\t\tResultSet rs = pr.executeQuery();<br />\t\t\tassertTrue( \"No row produce in loop:\"+i, rs.next());\t<br />\t\t\tassertEquals( \"loop:\"+i, 0, rs.getInt(1));<br />\t\t}","group":1},{"id":"&emsp;{<br />\t\t\t\t\tbyte[] buffer = new byte[length];<br />\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );<br />\t\t\t\t\treturn buffer;<br />\t\t\t\t}","group":1},{"id":"&emsp;{<br />\t\t\t\tfailed = true;<br />&emsp;&emsp;&emsp;&emsp;msgBuf.append(\"\\nMissing entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");<br />\t\t\t\t<br />\t\t\t\tfor (Iterator itr = diff.iterator(); itr.hasNext(); ) {<br />\t\t\t\t\tmsgBuf.append(itr.next());<br />\t\t\t\t\tif (itr.hasNext()) msgBuf.append(',');<br />\t\t\t\t}<br />\t\t\t}","group":1},{"id":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br />\t\tResultSet rs;<br />\t\tint count;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br />\t\t<br />\t\t//jetzt irgendwo in die Mitte scrollen<br />\t\trs.next();<br />\t\trs.next();<br />\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen<br />\t\t<br />\t\trs.last();<br />\t\tcount = 0;<br />\t\twhile(rs.previous()) count++;\t\t<br />\t\tassertEquals( valueCount, count );<br /><br />\t\trs.beforeFirst();<br />\t\tcount = -1;<br />\t\twhile(rs.next()) count++;\t\t<br />\t\tassertEquals( valueCount, count );<br /><br />\t\trs.beforeFirst();<br />\t\tcount = -1;<br />\t\twhile(rs.next()) count++;\t\t<br />\t\tassertEquals( valueCount, count );<br />\t}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;&emsp;for(int i=0; i<orderBy.size(); i++){<br />&emsp;&emsp;&emsp;\tcompileLinkExpression( orderBy.get(i));<br />&emsp;&emsp;&emsp;}<br />&emsp;&emsp;}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;byte[] daten = new byte[length];<br />&emsp;&emsp;System.arraycopy( page, offset, daten, 0, length);<br />&emsp;&emsp;offset += length;<br />&emsp;&emsp;return daten;<br />&emsp;}","group":1},{"id":"&emsp;{<br />\t\t\tint idx = internalExpressions.indexOf(expr);<br />\t\t\tif(idx >= 0) return idx;<br />\t\t\tinternalExpressions.add(expr);<br />\t\t\treturn internalExpressions.size()-1;<br />\t\t}","group":1},{"id":"&emsp;{<br />\t\t\tchar c = value[i];<br />\t\t\tpuffer[ offset++ ] = (byte)(c >> 8);<br />\t\t\tpuffer[ offset++ ] = (byte)(c);<br />\t\t}","group":1},{"id":"&emsp;{<br />\t\t\tcon.createStatement().execute(\"Create Table TestInSelect (i counter, v varchar(20), n bigint, b boolean)\");<br />\t\t\tassertRowCount( 0, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into TestInSelect(v,b) Values('qwert1',true)\");<br />\t\t\tassertRowCount( 1, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into TestInSelect(v,b) Values('qwert1',true)\");<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );<br />\t\t\tassertRowCount( 1, \"Select * From TestInSelect WHere i In (Select i from TestInSelect Where i>1)\" );<br />\t\t\tassertRowCount( 1, \"Select * From TestInSelect Where i IN ( 1, 1, 12345, 987654321)\" );<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where v IN ( null, '', 'qwert1', 'qwert1')\" );<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where v IN ( 'qwert1')\" );<br />\t\t\tassertRowCount( 0, \"Select * From TestInSelect Where '' IN ( 'qwert1')\" );<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where 'qwert1' IN ( 'qwert1', 'qwert2')\" );<br />\t\t}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;&emsp;&emsp;// There are not the correct count of rows.<br />&emsp;&emsp;&emsp;&emsp;if (count == 0){<br />&emsp;&emsp;&emsp;&emsp;&emsp;createTestDataWithClassicInsert( con );<br />&emsp;&emsp;&emsp;&emsp;&emsp;rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br />&emsp;&emsp;&emsp;&emsp;&emsp;rs.next();<br />&emsp;&emsp;&emsp;&emsp;&emsp;count = rs.getInt(1);<br />&emsp;&emsp;&emsp;&emsp;}<br />&emsp;&emsp;&emsp;&emsp;if (count != rowCount){<br />&emsp;&emsp;&emsp;&emsp;&emsp;System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");<br />&emsp;&emsp;&emsp;&emsp;&emsp;return;<br />&emsp;&emsp;&emsp;&emsp;}<br />&emsp;&emsp;&emsp;}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;byte[] result = new byte[8];<br />&emsp;&emsp;result[0] = (byte)(value >> 56);<br />&emsp;&emsp;result[1] = (byte)(value >> 48);<br />&emsp;&emsp;result[2] = (byte)(value >> 40);<br />&emsp;&emsp;result[3] = (byte)(value >> 32);<br />&emsp;&emsp;result[4] = (byte)(value >> 24);<br />&emsp;&emsp;result[5] = (byte)(value >> 16);<br />&emsp;&emsp;result[6] = (byte)(value >> 8);<br />&emsp;&emsp;result[7] = (byte)(value);<br />&emsp;&emsp;return result;<br />&emsp;}","group":1},{"id":"&emsp;{<br />\t\tverifyFreePufferSize(4);<br />\t\tpuffer[ offset++ ] = (byte)(value >> 24);<br />\t\tpuffer[ offset++ ] = (byte)(value >> 16);<br />\t\tpuffer[ offset++ ] = (byte)(value >> 8);<br />\t\tpuffer[ offset++ ] = (byte)(value);<br />\t}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;StringBuffer buf = new StringBuffer(bytes.length << 1);<br />&emsp;&emsp;for(int i=0; i<bytes.length; i++){<br />&emsp;&emsp;&emsp;buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );<br />&emsp;&emsp;&emsp;buf.append( digits[ (bytes[i]&emsp; ) & 0x0F ] );<br />&emsp;&emsp;}<br />&emsp;&emsp;return buf.toString();<br />&emsp;}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Create Table Like (c varchar(20))\");<br /><br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qwert1')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qwert2')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qwert2.5')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('awert1')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('awert2')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('awert3')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qweSGSGSrt1')\");<br />&emsp;&emsp;&emsp;<br />&emsp;&emsp;&emsp;assertRowCount( 2, \"Select * From Like Where c like 'qwert_'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 3, \"Select * From Like Where c like 'qwert%'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 2, \"Select * From Like Where c like 'qwert2%'\" );<br /><br />&emsp;&emsp;&emsp;assertRowCount( 6, \"Select * From Like Where c like '_wert%'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 2, \"Select * From Like Where c like 'qwe%rt1'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 3, \"Select * From Like Where c like 'qwe%rt_'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 7, \"Select * From Like Where c like '%_'\" );<br /><br />&emsp;&emsp;}","group":1},{"id":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tString oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by nv\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = rs.getString(\"nv\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = rs.getString(\"nv\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tassertTrue( String.CASE_INSENSITIVE_ORDER.compare( oldValue, rs.getString(\"nv\") ) <= 0 );<br />\t\t\toldValue = rs.getString(\"nv\");<br />\t\t\tcount++;<br />\t\t}<br />\t\tassertEquals( valueCount, count );<br />\t}","group":1},{"id":"&emsp;{<br />\t\treturn ((data[ offset++ ] & 0xFF) << 8) | (data[ offset++ ] & 0xFF);<br />\t}","group":1},{"id":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tString oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v ASC\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = rs.getString(\"v\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = rs.getString(\"v\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tString newValue = rs.getString(\"v\");<br />\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );<br />\t\t\toldValue = newValue;<br />\t\t\tcount++;<br />\t\t}<br />\t\trs.close();<br />\t\tassertEquals( valueCount, count );<br />\t}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;Connection con = AllTests.getConnection();<br />&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;st.execute(\"create table \"+table+\" (a varchar(2) unique)\");<br />&emsp;&emsp;st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");<br />&emsp;&emsp;ResultSet rs = st.executeQuery(\"Select * From \" + table);<br />&emsp;&emsp;assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );<br />&emsp;&emsp;rs = con.getMetaData().getIndexInfo( null, null, table, false, false );<br />&emsp;&emsp;assertRowCount( 2, rs );<br />&emsp;}","group":1},{"id":"&emsp;{<br />\t\tif (idx >= size)<br />\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br />\t\treturn data[idx];<br />\t}","group":1},{"id":"&emsp;{<br />&emsp;\tint newSize = offset + 4;<br />&emsp;&emsp;if(newSize > page.length) resizePage(newSize);<br /><br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 24);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 16);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 8);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value);<br />&emsp;}","group":1},{"id":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tInteger oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = (Integer)rs.getObject(\"i\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = (Integer)rs.getObject(\"i\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br />\t\t\toldValue = (Integer)rs.getObject(\"i\");<br />\t\t\tcount++;<br />\t\t}<br />\t\tassertEquals( valueCount, count );<br />\t}","group":1},{"id":"&emsp;{<br />\t\t\t\t\t\t\tIterator values = locks.values().iterator();<br />\t\t\t\t\t\t\twhile(values.hasNext()){<br />\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();<br />\t\t\t\t\t\t\t\tif(lock.con != con) return null;<br />\t\t\t\t\t\t\t}<br />\t\t\t\t\t\t}","group":1},{"id":"&emsp;{\t\t\t<br />\t\t\tcon.setAutoCommit(false);<br />\t\t\tcon.createStatement().execute(\"Create Table transactions ( v varchar(20))\");<br />\t\t\tassertRowCount( 0, \"Select * from transactions\");<br /><br />\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\") );<br />\t\t\tassertEqualsRsValue(\"qwert\", \"Select * from transactions\");<br />\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br />\t\t\t<br />\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\") );<br />\t\t\tassertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br />\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br />\t\t\t<br />&emsp;&emsp;&emsp;assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\") );<br />&emsp;&emsp;&emsp;assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br />&emsp;&emsp;&emsp;assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br />&emsp;&emsp;&emsp;<br />\t\t\tSavepoint savepoint = con.setSavepoint();<br />\t\t\t<br />\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\") );<br />\t\t\tassertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br />\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br /><br />\t\t\tcon.rollback( savepoint );<br />\t\t\t<br />\t\t\tcon.commit();<br />\t\t\tassertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br />\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br />\t\t}","group":1},{"id":"&emsp;{<br />&emsp;\tint newSize = offset + 8;<br />&emsp;&emsp;if(newSize > page.length) resizePage(newSize);<br /><br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 56);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 48);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 40);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 32);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 24);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 16);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 8);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value);<br />&emsp;}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;Expression expr = getValue(i);<br />&emsp;&emsp;&emsp;wasNull = expr.isNull();<br />&emsp;&emsp;&emsp;return expr.getLong();<br />&emsp;&emsp;}catch(Exception e){<br />&emsp;&emsp;&emsp;throw SmallSQLException.createFromException( e );<br />&emsp;&emsp;}<br />&emsp;}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;&emsp;&emsp;// overflow Integer Value<br />&emsp;&emsp;&emsp;&emsp;long temp = value[0] & 0xFFFFFFFFL;<br />&emsp;&emsp;&emsp;&emsp;return temp / scaleDoubleFactor[scale] * signum;<br />&emsp;&emsp;&emsp;}","group":1},{"id":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tString oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = rs.getString(\"v\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = rs.getString(\"v\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tString newValue = rs.getString(\"v\");<br />\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );<br />\t\t\toldValue = newValue;<br />\t\t\tcount++;<br />\t\t}<br />\t\tassertEquals( valueCount, count );<br />\t}","group":1},{"id":"&emsp;{<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;return Double.parseDouble( val ) != 0;<br />&emsp;&emsp;}catch(NumberFormatException e){/*ignore it if it not a number*/}<br />&emsp;&emsp;return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );<br />&emsp;}","group":1},{"id":"/src/smallsql/database/SSDatabaseMetaData.java","group":2},{"id":"/src/smallsql/database/FileIndex.java","group":2},{"id":"/src/smallsql/database/Join.java","group":2},{"id":"/src/smallsql/database/CommandDelete.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionIIF.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionSpace.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionReturnP1Number.java","group":2},{"id":"/src/smallsql/database/IndexDescription.java","group":2},{"id":"/src/smallsql/junit/TestOther.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionUCase.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionPower.java","group":2},{"id":"/src/smallsql/database/RowSource.java","group":2},{"id":"/src/smallsql/database/SQLTokenizer.java","group":2},{"id":"/src/smallsql/database/TableViewMap.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionInsert.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionPI.java","group":2},{"id":"/src/smallsql/junit/AllTests.java","group":2},{"id":"/src/smallsql/junit/TestStatement.java","group":2},{"id":"/src/smallsql/database/CommandUpdate.java","group":2},{"id":"/src/smallsql/database/SSDriver.java","group":2},{"id":"/src/smallsql/database/SSResultSetMetaData.java","group":2},{"id":"/src/smallsql/database/NoFromResult.java","group":2},{"id":"/src/smallsql/junit/TestOperatoren.java","group":2},{"id":"/src/smallsql/database/IndexNode.java","group":2},{"id":"/src/smallsql/junit/TestDataTypes.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionLog.java","group":2},{"id":"/src/smallsql/junit/TestDBMetaData.java","group":2},{"id":"/src/smallsql/database/SSSavepoint.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionASin.java","group":2},{"id":"/src/smallsql/database/MutableNumeric.java","group":2},{"id":"/src/smallsql/database/Scrollable.java","group":2},{"id":"/src/smallsql/database/TableView.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionLog10.java","group":2},{"id":"/src/smallsql/database/IndexNodeScrollStatus.java","group":2},{"id":"/src/smallsql/database/Index.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionSoundex.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionChar.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionMod.java","group":2},{"id":"/src/smallsql/database/SSPreparedStatement.java","group":2},{"id":"/src/smallsql/database/View.java","group":2},{"id":"/src/smallsql/database/Utils.java","group":2},{"id":"/src/smallsql/database/IndexScrollStatus.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionTan.java","group":2},{"id":"/src/smallsql/database/DataSource.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionMinute.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionMonth.java","group":2},{"id":"/src/smallsql/database/StorePage.java","group":2},{"id":"/src/smallsql/database/TableViewResult.java","group":2},{"id":"/src/smallsql/database/Language/Language.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionCharLen.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionReturnInt.java","group":2},{"id":"/src/smallsql/database/ExpressionName.java","group":2},{"id":"/src/smallsql/database/SSStatement.java","group":2},{"id":"/src/smallsql/database/CommandTable.java","group":2},{"id":"/src/smallsql/junit/TestScrollable.java","group":2},{"id":"/src/smallsql/database/TableStorePage.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionLocate.java","group":2},{"id":"/src/smallsql/database/DataSources.java","group":2},{"id":"/src/smallsql/database/ViewResult.java","group":2},{"id":"/src/smallsql/junit/TestJoins.java","group":2},{"id":"/src/smallsql/junit/TestThreads.java","group":2},{"id":"/src/smallsql/database/Table.java","group":2},{"id":"/src/smallsql/database/ExpressionArithmetic.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionExp.java","group":2},{"id":"/src/smallsql/database/MemoryStream.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionReturnP1.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionCeiling.java","group":2},{"id":"/src/smallsql/database/SQLParser.java","group":2},{"id":"/src/smallsql/database/CommandCreateView.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionRight.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionCase.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionLCase.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionTimestampDiff.java","group":2},{"id":"/src/smallsql/database/Command.java","group":2},{"id":"/src/smallsql/junit/TestExceptions.java","group":2},{"id":"/src/smallsql/database/TableResult.java","group":2},{"id":"/src/smallsql/junit/TestExceptionMethods.java","group":2},{"id":"/src/smallsql/database/Identity.java","group":2},{"id":"/src/smallsql/junit/TestResultSet.java","group":2},{"id":"/src/smallsql/database/TransactionStep.java","group":2},{"id":"/src/smallsql/database/SSConnection.java","group":2},{"id":"/src/smallsql/database/StorePageLink.java","group":2},{"id":"/src/smallsql/database/MemoryResult.java","group":2},{"id":"/src/smallsql/junit/TestOrderBy.java","group":2},{"id":"/src/smallsql/database/IndexDescriptions.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionDayOfMonth.java","group":2},{"id":"/src/smallsql/database/Distinct.java","group":2},{"id":"/src/smallsql/database/SmallSQLException.java","group":2},{"id":"/src/smallsql/database/ForeignKeys.java","group":2},{"id":"/src/smallsql/database/StoreNull.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionSin.java","group":2},{"id":"/src/smallsql/database/TableStorePageInsert.java","group":2},{"id":"/src/smallsql/junit/BasicTestCase.java","group":2},{"id":"/src/smallsql/database/CommandSelect.java","group":2},{"id":"/src/smallsql/database/Language/Language_it.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionTimestampAdd.java","group":2},{"id":"/src/smallsql/database/Where.java","group":2},{"id":"/src/smallsql/database/Database.java","group":2},{"id":"/src/smallsql/database/DateTime.java","group":2},{"id":"/src/smallsql/database/SortedResult.java","group":2},{"id":"/src/smallsql/database/Mutable.java","group":2},{"id":"/src/smallsql/database/LongList.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionReturnP1StringAndBinary.java","group":2},{"id":"/src/smallsql/database/SSResultSet.java","group":2},{"id":"/src/smallsql/database/ExpressionInSelect.java","group":2},{"id":"/src/smallsql/database/Language/Language_en.java","group":2},{"id":"/src/smallsql/database/LongTreeListEnum.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionRTrim.java","group":2},{"id":"/src/smallsql/database/Expression.java","group":2},{"id":"/src/smallsql/database/LongTreeList.java","group":2},{"id":"/src/smallsql/database/CommandInsert.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionBitLen.java","group":2},{"id":"/src/smallsql/database/CreateFile.java","group":2},{"id":"/src/smallsql/database/MutableInteger.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionReplace.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionConvert.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionLeft.java","group":2},{"id":"/src/smallsql/database/CommandSet.java","group":2},{"id":"/src/smallsql/database/StoreNoCurrentRow.java","group":2},{"id":"/src/smallsql/database/JoinScroll.java","group":2},{"id":"/src/smallsql/tools/CommandLine.java","group":2},{"id":"/src/smallsql/database/MutableLong.java","group":2},{"id":"/src/smallsql/database/MutableFloat.java","group":2},{"id":"/src/smallsql/database/CommandCreateDatabase.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionOctetLen.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionTruncate.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionATan2.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionRadians.java","group":2},{"id":"/src/smallsql/database/Strings.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionAbs.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionACos.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionLength.java","group":2},{"id":"/src/smallsql/database/Column.java","group":2},{"id":"/src/smallsql/database/LongLongList.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionSubstring.java","group":2},{"id":"/src/smallsql/database/StoreImpl.java","group":2},{"id":"/src/smallsql/database/Store.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionAscii.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionRand.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionHour.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionDayOfYear.java","group":2},{"id":"/src/smallsql/database/Money.java","group":2},{"id":"/src/smallsql/junit/TestFunctions.java","group":2},{"id":"/src/smallsql/database/Lobs.java","group":2},{"id":"/src/smallsql/junit/TestIdentifer.java","group":2},{"id":"/src/smallsql/junit/TestLanguage.java","group":2},{"id":"/src/smallsql/junit/TestAlterTable2.java","group":2},{"id":"/src/smallsql/junit/TestAlterTable.java","group":2},{"id":"/src/smallsql/database/UnionAll.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionLTrim.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionRound.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionReturnString.java","group":2},{"id":"/src/smallsql/database/Columns.java","group":2},{"id":"/src/smallsql/database/Language/Language_de.java","group":2},{"id":"/src/smallsql/junit/TestTokenizer.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionATan.java","group":2},{"id":"/src/smallsql/junit/TestTransactions.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionFloor.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionSqrt.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionReturnFloat.java","group":2},{"id":"/src/smallsql/database/GroupResult.java","group":2},{"id":"/src/smallsql/database/ExpressionFunction.java","group":2},{"id":"/src/smallsql/database/Logger.java","group":2},{"id":"/src/smallsql/junit/TestDeleteUpdate.java","group":2},{"id":"/src/smallsql/database/JoinScrollIndex.java","group":2},{"id":"/src/smallsql/database/Expressions.java","group":2},{"id":"/src/smallsql/junit/TestGroupBy.java","group":2},{"id":"/src/smallsql/database/CommandDrop.java","group":2},{"id":"/src/smallsql/database/ColumnExpression.java","group":2},{"id":"/src/smallsql/junit/TestMoneyRounding.java","group":2},{"id":"/src/smallsql/junit/BenchTest.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionDifference.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionYear.java","group":2},{"id":"/src/smallsql/database/ExpressionValue.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionSign.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionCot.java","group":2},{"id":"/src/smallsql/database/StorePageMap.java","group":2},{"id":"/src/smallsql/database/FileIndexNode.java","group":2},{"id":"/src/smallsql/database/MutableDouble.java","group":2},{"id":"/src/smallsql/database/SQLToken.java","group":2},{"id":"/src/smallsql/database/SSCallableStatement.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionRepeat.java","group":2},{"id":"/src/smallsql/database/ForeignKey.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionDegrees.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionDayOfWeek.java","group":2},{"id":"/src/smallsql/database/ExpressionFunctionCos.java","group":2}],"links":[{"source":"/src/smallsql/junit/BenchTest.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;&emsp;st.execute(\"DELETE FROM \" + tableName);<br />&emsp;&emsp;&emsp;st.close();<br />&emsp;&emsp;}catch(Exception e){/* ignore it */}<br />&emsp;}"},{"source":"/src/smallsql/junit/BenchTest.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;&emsp;st.execute(\"DELETE FROM \" + tableName);<br />&emsp;&emsp;&emsp;st.close();<br />&emsp;&emsp;}catch(Exception e){/* ignore it */}<br />&emsp;}"},{"source":"/src/smallsql/junit/TestTransactions.java","value":2,"target":"&emsp;{\t\t\t<br />\t\t\tcon.setAutoCommit(false);<br />\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br />\t\t\tassertRowCount( 0, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br />\t\t\tassertRowCount( 1, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br />\t\t\tassertRowCount( 2, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions Select * From transactions\");<br />\t\t\tassertRowCount( 4, \"Select * from transactions\");<br />\t\t\t<br />\t\t\tcon.commit();<br />\t\t\tassertRowCount( 4, \"Select * from transactions\");<br />\t\t\t<br />\t\t}"},{"source":"/src/smallsql/junit/TestTransactions.java","value":2,"target":"&emsp;{\t\t\t<br />\t\t\tcon.setAutoCommit(false);<br />\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br />\t\t\tassertRowCount( 0, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br />\t\t\tassertRowCount( 1, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br />\t\t\tassertRowCount( 2, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions Select * From transactions\");<br />\t\t\tassertRowCount( 4, \"Select * from transactions\");<br />\t\t\t<br />\t\t\tcon.commit();<br />\t\t\tassertRowCount( 4, \"Select * from transactions\");<br />\t\t\t<br />\t\t}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":2,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tLong oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by bi\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = (Long)rs.getObject(\"bi\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = (Long)rs.getObject(\"bi\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tassertTrue( oldValue.compareTo( (Long)rs.getObject(\"bi\") ) < 0 );<br />\t\t\toldValue = (Long)rs.getObject(\"bi\");<br />\t\t\tcount++;<br />\t\t}<br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":2,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tLong oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by bi\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = (Long)rs.getObject(\"bi\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = (Long)rs.getObject(\"bi\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tassertTrue( oldValue.compareTo( (Long)rs.getObject(\"bi\") ) < 0 );<br />\t\t\toldValue = (Long)rs.getObject(\"bi\");<br />\t\t\tcount++;<br />\t\t}<br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/junit/TestDataTypes.java","value":4,"target":"&emsp;{<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;Connection con = AllTests.getConnection();<br />&emsp;&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;&emsp;st.execute(\"drop table \" + table);<br />&emsp;&emsp;&emsp;st.close();<br />&emsp;&emsp;}catch(Throwable e){<br />&emsp;&emsp;&emsp;//e.printStackTrace();<br />&emsp;&emsp;}<br />&emsp;}"},{"source":"/src/smallsql/junit/TestFunctions.java","value":4,"target":"&emsp;{<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;Connection con = AllTests.getConnection();<br />&emsp;&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;&emsp;st.execute(\"drop table \" + table);<br />&emsp;&emsp;&emsp;st.close();<br />&emsp;&emsp;}catch(Throwable e){<br />&emsp;&emsp;&emsp;//e.printStackTrace();<br />&emsp;&emsp;}<br />&emsp;}"},{"source":"/src/smallsql/junit/TestMoneyRounding.java","value":4,"target":"&emsp;{<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;Connection con = AllTests.getConnection();<br />&emsp;&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;&emsp;st.execute(\"drop table \" + table);<br />&emsp;&emsp;&emsp;st.close();<br />&emsp;&emsp;}catch(Throwable e){<br />&emsp;&emsp;&emsp;//e.printStackTrace();<br />&emsp;&emsp;}<br />&emsp;}"},{"source":"/src/smallsql/junit/TestOperatoren.java","value":4,"target":"&emsp;{<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;Connection con = AllTests.getConnection();<br />&emsp;&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;&emsp;st.execute(\"drop table \" + table);<br />&emsp;&emsp;&emsp;st.close();<br />&emsp;&emsp;}catch(Throwable e){<br />&emsp;&emsp;&emsp;//e.printStackTrace();<br />&emsp;&emsp;}<br />&emsp;}"},{"source":"/src/smallsql/junit/BenchTest.java","value":2,"target":"&emsp;{<br />\t&emsp;&emsp;&emsp;pr.setBytes (  1, byteArray );<br />\t&emsp;&emsp;&emsp;pr.setString(  2 , \"Test\" );<br />\t&emsp;&emsp;&emsp;pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br />\t&emsp;&emsp;&emsp;pr.setFloat (  4, (float)1234.56789 );<br />\t&emsp;&emsp;&emsp;pr.setFloat (  5 , (float)9876.54321 );<br />\t&emsp;&emsp;&emsp;pr.setBytes (  6, largeByteArray );<br />\t&emsp;&emsp;&emsp;pr.setInt   (  7 , i );<br />\t&emsp;&emsp;&emsp;pr.setDouble(  8 , 23.45 );<br />\t&emsp;&emsp;&emsp;pr.setDouble(  9 , 567.45 );<br />\t&emsp;&emsp;&emsp;pr.setFloat (  10 , (float)78.89 );<br />\t&emsp;&emsp;&emsp;pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br />\t&emsp;&emsp;&emsp;pr.setShort (  12, (short)23456 );<br />\t&emsp;&emsp;&emsp;pr.setFloat (  13, (float)34.56 );<br />\t&emsp;&emsp;&emsp;pr.setString(  14, \"sysname (30) NULL\" );<br />\t&emsp;&emsp;&emsp;pr.setString(  15 , \"text NULL\" );<br />\t&emsp;&emsp;&emsp;pr.setByte  (  16, (byte)28 );<br />\t&emsp;&emsp;&emsp;pr.setBytes (  17, byteArray );<br />\t&emsp;&emsp;&emsp;pr.setString(  18, \"varchar (255) NULL\" );<br />\t&emsp;&emsp;&emsp;pr.setInt   (  19 , i );<br />&emsp;&emsp;&emsp;&emsp;int updateCount = pr.executeUpdate();<br />&emsp;&emsp;&emsp;&emsp;if (updateCount != 1){<br />&emsp;&emsp;&emsp;&emsp;&emsp;System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br />&emsp;&emsp;&emsp;&emsp;&emsp;return;<br />&emsp;&emsp;&emsp;&emsp;}<br />&emsp;&emsp;&emsp;}"},{"source":"/src/smallsql/junit/BenchTest.java","value":2,"target":"&emsp;{<br />\t&emsp;&emsp;&emsp;pr.setBytes (  1, byteArray );<br />\t&emsp;&emsp;&emsp;pr.setString(  2 , \"Test\" );<br />\t&emsp;&emsp;&emsp;pr.setDate  (  3 , new Date( System.currentTimeMillis() ) );<br />\t&emsp;&emsp;&emsp;pr.setFloat (  4, (float)1234.56789 );<br />\t&emsp;&emsp;&emsp;pr.setFloat (  5 , (float)9876.54321 );<br />\t&emsp;&emsp;&emsp;pr.setBytes (  6, largeByteArray );<br />\t&emsp;&emsp;&emsp;pr.setInt   (  7 , i );<br />\t&emsp;&emsp;&emsp;pr.setDouble(  8 , 23.45 );<br />\t&emsp;&emsp;&emsp;pr.setDouble(  9 , 567.45 );<br />\t&emsp;&emsp;&emsp;pr.setFloat (  10 , (float)78.89 );<br />\t&emsp;&emsp;&emsp;pr.setTime  (  11, new Time( System.currentTimeMillis() ) );<br />\t&emsp;&emsp;&emsp;pr.setShort (  12, (short)23456 );<br />\t&emsp;&emsp;&emsp;pr.setFloat (  13, (float)34.56 );<br />\t&emsp;&emsp;&emsp;pr.setString(  14, \"sysname (30) NULL\" );<br />\t&emsp;&emsp;&emsp;pr.setString(  15 , \"text NULL\" );<br />\t&emsp;&emsp;&emsp;pr.setByte  (  16, (byte)28 );<br />\t&emsp;&emsp;&emsp;pr.setBytes (  17, byteArray );<br />\t&emsp;&emsp;&emsp;pr.setString(  18, \"varchar (255) NULL\" );<br />\t&emsp;&emsp;&emsp;pr.setInt   (  19 , i );<br />&emsp;&emsp;&emsp;&emsp;int updateCount = pr.executeUpdate();<br />&emsp;&emsp;&emsp;&emsp;if (updateCount != 1){<br />&emsp;&emsp;&emsp;&emsp;&emsp;System.out.println( \"  Failed: Update count should be 1 but it is \" + updateCount + \".\");<br />&emsp;&emsp;&emsp;&emsp;&emsp;return;<br />&emsp;&emsp;&emsp;&emsp;}<br />&emsp;&emsp;&emsp;}"},{"source":"/src/smallsql/database/TableView.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;&emsp;if(raFile != null)<br />&emsp;&emsp;&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;&emsp;&emsp;raFile.close();<br />&emsp;&emsp;&emsp;&emsp;}catch(Exception e2){<br />&emsp;&emsp;&emsp;&emsp;&emsp;DriverManager.println(e2.toString());<br />&emsp;&emsp;&emsp;&emsp;}<br />&emsp;&emsp;&emsp;throw SmallSQLException.createFromException(e);<br />&emsp;&emsp;}"},{"source":"/src/smallsql/database/IndexDescription.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;&emsp;if(raFile != null)<br />&emsp;&emsp;&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;&emsp;&emsp;raFile.close();<br />&emsp;&emsp;&emsp;&emsp;}catch(Exception e2){<br />&emsp;&emsp;&emsp;&emsp;&emsp;DriverManager.println(e2.toString());<br />&emsp;&emsp;&emsp;&emsp;}<br />&emsp;&emsp;&emsp;throw SmallSQLException.createFromException(e);<br />&emsp;&emsp;}"},{"source":"/src/smallsql/junit/TestStatement.java","value":2,"target":"&emsp;{<br />&emsp;\tif(init) return;<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tdropTable( con, \"statement\");<br />\t\tst.execute(\"Create Table statement (c varchar(30), i counter)\");<br />\t\tinit = true;<br />&emsp;}"},{"source":"/src/smallsql/junit/TestExceptions.java","value":2,"target":"&emsp;{<br />&emsp;\tif(init) return;<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tdropTable( con, \"statement\");<br />\t\tst.execute(\"Create Table statement (c varchar(30), i counter)\");<br />\t\tinit = true;<br />&emsp;}"},{"source":"/src/smallsql/junit/TestTransactions.java","value":2,"target":"&emsp;{\t\t\t<br />\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br />\t\t\tassertRowCount( 0, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br />\t\t\tassertRowCount( 1, \"Select * from transactions\");<br /><br />\t\t\tcon.setAutoCommit(false);<br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br />\t\t\tassertRowCount( 2, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br />\t\t\tassertRowCount( 4, \"Select * from transactions\");<br />\t\t\t<br />\t\t\tcon.rollback();<br />\t\t\tassertRowCount( 1, \"Select * from transactions\");<br />\t\t\t<br />\t\t}"},{"source":"/src/smallsql/junit/TestTransactions.java","value":2,"target":"&emsp;{\t\t\t<br />\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br />\t\t\tassertRowCount( 0, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");<br />\t\t\tassertRowCount( 1, \"Select * from transactions\");<br /><br />\t\t\tcon.setAutoCommit(false);<br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");<br />\t\t\tassertRowCount( 2, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");<br />\t\t\tassertRowCount( 4, \"Select * from transactions\");<br />\t\t\t<br />\t\t\tcon.rollback();<br />\t\t\tassertRowCount( 1, \"Select * from transactions\");<br />\t\t\t<br />\t\t}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":2,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tString oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = rs.getString(\"v\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(oldValue != null && rs.next()){<br />\t\t\tString newValue = rs.getString(\"v\");<br />\t\t\tif(newValue != null){<br />\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );<br />\t\t\t\tcount++;<br />\t\t\t}<br />\t\t\toldValue = newValue;<br />\t\t}<br />\t\tassertNull(oldValue);<br />\t\tassertFalse( rs.next() );<br /><br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":2,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tString oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = rs.getString(\"v\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(oldValue != null && rs.next()){<br />\t\t\tString newValue = rs.getString(\"v\");<br />\t\t\tif(newValue != null){<br />\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );<br />\t\t\t\tcount++;<br />\t\t\t}<br />\t\t\toldValue = newValue;<br />\t\t}<br />\t\tassertNull(oldValue);<br />\t\tassertFalse( rs.next() );<br /><br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/junit/TestDBMetaData.java","value":1,"target":"&emsp;{<br />&emsp;&emsp;&emsp;String type2 = rs.getString(\"TABLE_TYPE\");<br />&emsp;&emsp;&emsp;assertTrue( type+\"-\"+type2, type.compareTo(type2)<0);<br />&emsp;&emsp;&emsp;type = type2;<br />&emsp;&emsp;&emsp;count++;<br />&emsp;&emsp;}"},{"source":"/src/smallsql/junit/TestExceptionMethods.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;Connection con = AllTests.getConnection();<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;&emsp;st.execute(\"Create Table DuplicatedColumn(col INT)\");<br />&emsp;&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;&emsp;st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");<br />&emsp;&emsp;&emsp;&emsp;fail(\"SQLException 'Duplicated Column' should be throw\");<br />&emsp;&emsp;&emsp;}catch(SQLException e){<br />&emsp;&emsp;&emsp;&emsp;assertSQLException(\"01000\", 0, e);<br />&emsp;&emsp;&emsp;}<br />&emsp;&emsp;}finally{<br />&emsp;&emsp;&emsp;dropTable(con, \"DuplicatedColumn\");<br />&emsp;&emsp;}<br />&emsp;}"},{"source":"/src/smallsql/junit/TestExceptionMethods.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;Connection con = AllTests.getConnection();<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;&emsp;st.execute(\"Create Table DuplicatedColumn(col INT)\");<br />&emsp;&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;&emsp;st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");<br />&emsp;&emsp;&emsp;&emsp;fail(\"SQLException 'Duplicated Column' should be throw\");<br />&emsp;&emsp;&emsp;}catch(SQLException e){<br />&emsp;&emsp;&emsp;&emsp;assertSQLException(\"01000\", 0, e);<br />&emsp;&emsp;&emsp;}<br />&emsp;&emsp;}finally{<br />&emsp;&emsp;&emsp;dropTable(con, \"DuplicatedColumn\");<br />&emsp;&emsp;}<br />&emsp;}"},{"source":"/src/smallsql/database/ExpressionFunctionTruncate.java","value":2,"target":"&emsp;{<br />\t\t\tfor(int i=0; i<places; i++){<br />\t\t\t\tfactor *= 10;<br />\t\t\t}<br />\t\t\tvalue *= factor;<br />\t\t}"},{"source":"/src/smallsql/database/ExpressionFunctionRound.java","value":2,"target":"&emsp;{<br />\t\t\tfor(int i=0; i<places; i++){<br />\t\t\t\tfactor *= 10;<br />\t\t\t}<br />\t\t\tvalue *= factor;<br />\t\t}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":1,"target":"&emsp;{<br />\t\t\tassertTrue( oldValue.compareTo( rs.getString(\"v\") ) < 0 );<br />\t\t\toldValue = rs.getString(\"v\");<br />\t\t\tcount++;<br />\t\t}"},{"source":"/src/smallsql/junit/TestTransactions.java","value":2,"target":"&emsp;{\t\t\t<br />\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br />\t\t\tassertRowCount( 0, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br /><br />\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)<br />\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where v = 'qwert'\");<br />\t\t\t<br />\t\t\trs.moveToInsertRow();<br />\t\t\trs.updateString(\"v\", \"qwert\");<br />\t\t\trs.insertRow();<br />\t\t\t<br />\t\t\trs.beforeFirst();<br />\t\t\tassertTrue( rs.next() );<br />\t\t\tassertEquals(\"qwert\", rs.getString(\"v\"));<br />\t\t\tassertFalse( rs.next() );<br />\t\t}"},{"source":"/src/smallsql/junit/TestTransactions.java","value":2,"target":"&emsp;{\t\t\t<br />\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");<br />\t\t\tassertRowCount( 0, \"Select * from transactions\");<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");<br /><br />\t\t\tResultSet rs = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE)<br />\t\t\t\t\t\t\t\t.executeQuery(\"Select * from transactions Where v = 'qwert'\");<br />\t\t\t<br />\t\t\trs.moveToInsertRow();<br />\t\t\trs.updateString(\"v\", \"qwert\");<br />\t\t\trs.insertRow();<br />\t\t\t<br />\t\t\trs.beforeFirst();<br />\t\t\tassertTrue( rs.next() );<br />\t\t\tassertEquals(\"qwert\", rs.getString(\"v\"));<br />\t\t\tassertFalse( rs.next() );<br />\t\t}"},{"source":"/src/smallsql/database/ExpressionFunctionTruncate.java","value":2,"target":"&emsp;{<br />\t\t\tfor(int i=0; i>places; i--){<br />\t\t\t\tfactor *= 10;<br />\t\t\t}<br />\t\t\tvalue /= factor;<br />\t\t}"},{"source":"/src/smallsql/database/ExpressionFunctionRound.java","value":2,"target":"&emsp;{<br />\t\t\tfor(int i=0; i>places; i--){<br />\t\t\t\tfactor *= 10;<br />\t\t\t}<br />\t\t\tvalue /= factor;<br />\t\t}"},{"source":"/src/smallsql/junit/TestTransactions.java","value":6,"target":"&emsp;{<br />\t\t\ttry{<br />\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");<br />\t\t\t}catch(Throwable e){e.printStackTrace();}<br />\t\t\tcon.setAutoCommit(true);<br />\t\t}"},{"source":"/src/smallsql/junit/TestTransactions.java","value":6,"target":"&emsp;{<br />\t\t\ttry{<br />\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");<br />\t\t\t}catch(Throwable e){e.printStackTrace();}<br />\t\t\tcon.setAutoCommit(true);<br />\t\t}"},{"source":"/src/smallsql/junit/TestTransactions.java","value":6,"target":"&emsp;{<br />\t\t\ttry{<br />\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");<br />\t\t\t}catch(Throwable e){e.printStackTrace();}<br />\t\t\tcon.setAutoCommit(true);<br />\t\t}"},{"source":"/src/smallsql/junit/TestTransactions.java","value":6,"target":"&emsp;{<br />\t\t\ttry{<br />\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");<br />\t\t\t}catch(Throwable e){e.printStackTrace();}<br />\t\t\tcon.setAutoCommit(true);<br />\t\t}"},{"source":"/src/smallsql/junit/TestTransactions.java","value":6,"target":"&emsp;{<br />\t\t\ttry{<br />\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");<br />\t\t\t}catch(Throwable e){e.printStackTrace();}<br />\t\t\tcon.setAutoCommit(true);<br />\t\t}"},{"source":"/src/smallsql/junit/TestTransactions.java","value":6,"target":"&emsp;{<br />\t\t\ttry{<br />\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");<br />\t\t\t}catch(Throwable e){e.printStackTrace();}<br />\t\t\tcon.setAutoCommit(true);<br />\t\t}"},{"source":"/src/smallsql/junit/TestGroupBy.java","value":2,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tPreparedStatement pr = con.prepareStatement(\"Select count(*) FROM \" + table1 + \" Group By name Order By name DESC\");<br />\t\tfor(int i=1; i<=3; i++){<br />\t\t\tResultSet rs = pr.executeQuery( );<br />\t\t\tassertTrue  ( \"loop:\"+i, rs.next());<br />\t\t\tassertEquals( \"loop:\"+i, 1, rs.getInt(1));<br />\t\t\tassertTrue  ( \"loop:\"+i, rs.next());<br />\t\t\tassertEquals( \"loop:\"+i, 3, rs.getInt(1));<br />\t\t}<br />\t}"},{"source":"/src/smallsql/junit/TestGroupBy.java","value":2,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tPreparedStatement pr = con.prepareStatement(\"Select count(*) FROM \" + table1 + \" Group By name Order By name DESC\");<br />\t\tfor(int i=1; i<=3; i++){<br />\t\t\tResultSet rs = pr.executeQuery( );<br />\t\t\tassertTrue  ( \"loop:\"+i, rs.next());<br />\t\t\tassertEquals( \"loop:\"+i, 1, rs.getInt(1));<br />\t\t\tassertTrue  ( \"loop:\"+i, rs.next());<br />\t\t\tassertEquals( \"loop:\"+i, 3, rs.getInt(1));<br />\t\t}<br />\t}"},{"source":"/src/smallsql/database/SSPreparedStatement.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;&emsp;&emsp;&emsp;failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);<br />&emsp;&emsp;&emsp;&emsp;&emsp;failed.initCause(ex);<br />&emsp;&emsp;&emsp;&emsp;}"},{"source":"/src/smallsql/database/SSStatement.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;&emsp;&emsp;&emsp;failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);<br />&emsp;&emsp;&emsp;&emsp;&emsp;failed.initCause(ex);<br />&emsp;&emsp;&emsp;&emsp;}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":2,"target":"&emsp;{<br />\t\t\tString newValue = rs.getString(\"c2\");<br />\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );<br />\t\t\toldValue = newValue;<br />\t\t\tcount++;<br />\t\t}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":2,"target":"&emsp;{<br />\t\t\tString newValue = rs.getString(\"c2\");<br />\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );<br />\t\t\toldValue = newValue;<br />\t\t\tcount++;<br />\t\t}"},{"source":"/src/smallsql/database/IndexScrollStatus.java","value":2,"target":"&emsp;{<br />\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){<br />\t\t\t\t\t\t\tlevel++;<br />\t\t\t\t\t\t\tnodeStack.push(<br />\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, <br />\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), <br />\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));<br />\t\t\t\t\t\t\tcontinue;<br />\t\t\t\t\t\t}else<br />\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);<br />\t\t\t\t\t}<br />\t\t\t\t\t//There is no RowOffset in this node"},{"source":"/src/smallsql/database/IndexScrollStatus.java","value":2,"target":"&emsp;{<br />\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){<br />\t\t\t\t\t\t\tlevel++;<br />\t\t\t\t\t\t\tnodeStack.push(<br />\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, <br />\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), <br />\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));<br />\t\t\t\t\t\t\tcontinue;<br />\t\t\t\t\t\t}else<br />\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);<br />\t\t\t\t\t}<br />\t\t\t\t\t//There is no RowOffset in this node"},{"source":"/src/smallsql/database/MutableNumeric.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;&emsp;&emsp;// simple Long Value<br />&emsp;&emsp;&emsp;&emsp;long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);<br />&emsp;&emsp;&emsp;&emsp;return temp / scaleFloatFactor[scale] * signum;<br />&emsp;&emsp;&emsp;}"},{"source":"/src/smallsql/database/MutableNumeric.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;&emsp;&emsp;// simple Long Value<br />&emsp;&emsp;&emsp;&emsp;long temp = (((long)value[0]) << 32) | (value[1] & 0xFFFFFFFFL);<br />&emsp;&emsp;&emsp;&emsp;return temp / scaleFloatFactor[scale] * signum;<br />&emsp;&emsp;&emsp;}"},{"source":"/src/smallsql/junit/TestGroupBy.java","value":1,"target":"&emsp;{<br />\t\t\tResultSet rs = pr.executeQuery();<br />\t\t\tassertTrue( \"No row produce in loop:\"+i, rs.next());\t<br />\t\t\tassertEquals( \"loop:\"+i, 0, rs.getInt(1));<br />\t\t}"},{"source":"/src/smallsql/database/ExpressionFunctionConvert.java","value":2,"target":"&emsp;{<br />\t\t\t\t\tbyte[] buffer = new byte[length];<br />\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );<br />\t\t\t\t\treturn buffer;<br />\t\t\t\t}"},{"source":"/src/smallsql/database/ExpressionFunctionConvert.java","value":2,"target":"&emsp;{<br />\t\t\t\t\tbyte[] buffer = new byte[length];<br />\t\t\t\t\tSystem.arraycopy(bytes, 0, buffer, 0, Math.min(bytes.length,length) );<br />\t\t\t\t\treturn buffer;<br />\t\t\t\t}"},{"source":"/src/smallsql/junit/TestLanguage.java","value":2,"target":"&emsp;{<br />\t\t\t\tfailed = true;<br />&emsp;&emsp;&emsp;&emsp;msgBuf.append(\"\\nMissing entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");<br />\t\t\t\t<br />\t\t\t\tfor (Iterator itr = diff.iterator(); itr.hasNext(); ) {<br />\t\t\t\t\tmsgBuf.append(itr.next());<br />\t\t\t\t\tif (itr.hasNext()) msgBuf.append(',');<br />\t\t\t\t}<br />\t\t\t}"},{"source":"/src/smallsql/junit/TestLanguage.java","value":2,"target":"&emsp;{<br />\t\t\t\tfailed = true;<br />&emsp;&emsp;&emsp;&emsp;msgBuf.append(\"\\nMissing entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");<br />\t\t\t\t<br />\t\t\t\tfor (Iterator itr = diff.iterator(); itr.hasNext(); ) {<br />\t\t\t\t\tmsgBuf.append(itr.next());<br />\t\t\t\t\tif (itr.hasNext()) msgBuf.append(',');<br />\t\t\t\t}<br />\t\t\t}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":2,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br />\t\tResultSet rs;<br />\t\tint count;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br />\t\t<br />\t\t//jetzt irgendwo in die Mitte scrollen<br />\t\trs.next();<br />\t\trs.next();<br />\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen<br />\t\t<br />\t\trs.last();<br />\t\tcount = 0;<br />\t\twhile(rs.previous()) count++;\t\t<br />\t\tassertEquals( valueCount, count );<br /><br />\t\trs.beforeFirst();<br />\t\tcount = -1;<br />\t\twhile(rs.next()) count++;\t\t<br />\t\tassertEquals( valueCount, count );<br /><br />\t\trs.beforeFirst();<br />\t\tcount = -1;<br />\t\twhile(rs.next()) count++;\t\t<br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":2,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);<br />\t\tResultSet rs;<br />\t\tint count;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");<br />\t\t<br />\t\t//jetzt irgendwo in die Mitte scrollen<br />\t\trs.next();<br />\t\trs.next();<br />\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen<br />\t\t<br />\t\trs.last();<br />\t\tcount = 0;<br />\t\twhile(rs.previous()) count++;\t\t<br />\t\tassertEquals( valueCount, count );<br /><br />\t\trs.beforeFirst();<br />\t\tcount = -1;<br />\t\twhile(rs.next()) count++;\t\t<br />\t\tassertEquals( valueCount, count );<br /><br />\t\trs.beforeFirst();<br />\t\tcount = -1;<br />\t\twhile(rs.next()) count++;\t\t<br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/database/CommandSelect.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;&emsp;for(int i=0; i<orderBy.size(); i++){<br />&emsp;&emsp;&emsp;\tcompileLinkExpression( orderBy.get(i));<br />&emsp;&emsp;&emsp;}<br />&emsp;&emsp;}"},{"source":"/src/smallsql/database/CommandSelect.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;&emsp;for(int i=0; i<orderBy.size(); i++){<br />&emsp;&emsp;&emsp;\tcompileLinkExpression( orderBy.get(i));<br />&emsp;&emsp;&emsp;}<br />&emsp;&emsp;}"},{"source":"/src/smallsql/database/StoreImpl.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;byte[] daten = new byte[length];<br />&emsp;&emsp;System.arraycopy( page, offset, daten, 0, length);<br />&emsp;&emsp;offset += length;<br />&emsp;&emsp;return daten;<br />&emsp;}"},{"source":"/src/smallsql/database/MemoryStream.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;byte[] daten = new byte[length];<br />&emsp;&emsp;System.arraycopy( page, offset, daten, 0, length);<br />&emsp;&emsp;offset += length;<br />&emsp;&emsp;return daten;<br />&emsp;}"},{"source":"/src/smallsql/database/GroupResult.java","value":2,"target":"&emsp;{<br />\t\t\tint idx = internalExpressions.indexOf(expr);<br />\t\t\tif(idx >= 0) return idx;<br />\t\t\tinternalExpressions.add(expr);<br />\t\t\treturn internalExpressions.size()-1;<br />\t\t}"},{"source":"/src/smallsql/database/GroupResult.java","value":2,"target":"&emsp;{<br />\t\t\tint idx = internalExpressions.indexOf(expr);<br />\t\t\tif(idx >= 0) return idx;<br />\t\t\tinternalExpressions.add(expr);<br />\t\t\treturn internalExpressions.size()-1;<br />\t\t}"},{"source":"/src/smallsql/database/MemoryStream.java","value":2,"target":"&emsp;{<br />\t\t\tchar c = value[i];<br />\t\t\tpuffer[ offset++ ] = (byte)(c >> 8);<br />\t\t\tpuffer[ offset++ ] = (byte)(c);<br />\t\t}"},{"source":"/src/smallsql/database/StoreImpl.java","value":2,"target":"&emsp;{<br />\t\t\tchar c = value[i];<br />\t\t\tpuffer[ offset++ ] = (byte)(c >> 8);<br />\t\t\tpuffer[ offset++ ] = (byte)(c);<br />\t\t}"},{"source":"/src/smallsql/junit/TestOther.java","value":3,"target":"&emsp;{<br />\t\t\tcon.createStatement().execute(\"Create Table TestInSelect (i counter, v varchar(20), n bigint, b boolean)\");<br />\t\t\tassertRowCount( 0, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into TestInSelect(v,b) Values('qwert1',true)\");<br />\t\t\tassertRowCount( 1, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into TestInSelect(v,b) Values('qwert1',true)\");<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );<br />\t\t\tassertRowCount( 1, \"Select * From TestInSelect WHere i In (Select i from TestInSelect Where i>1)\" );<br />\t\t\tassertRowCount( 1, \"Select * From TestInSelect Where i IN ( 1, 1, 12345, 987654321)\" );<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where v IN ( null, '', 'qwert1', 'qwert1')\" );<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where v IN ( 'qwert1')\" );<br />\t\t\tassertRowCount( 0, \"Select * From TestInSelect Where '' IN ( 'qwert1')\" );<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where 'qwert1' IN ( 'qwert1', 'qwert2')\" );<br />\t\t}"},{"source":"/src/smallsql/junit/TestOther.java","value":3,"target":"&emsp;{<br />\t\t\tcon.createStatement().execute(\"Create Table TestInSelect (i counter, v varchar(20), n bigint, b boolean)\");<br />\t\t\tassertRowCount( 0, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into TestInSelect(v,b) Values('qwert1',true)\");<br />\t\t\tassertRowCount( 1, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into TestInSelect(v,b) Values('qwert1',true)\");<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );<br />\t\t\tassertRowCount( 1, \"Select * From TestInSelect WHere i In (Select i from TestInSelect Where i>1)\" );<br />\t\t\tassertRowCount( 1, \"Select * From TestInSelect Where i IN ( 1, 1, 12345, 987654321)\" );<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where v IN ( null, '', 'qwert1', 'qwert1')\" );<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where v IN ( 'qwert1')\" );<br />\t\t\tassertRowCount( 0, \"Select * From TestInSelect Where '' IN ( 'qwert1')\" );<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where 'qwert1' IN ( 'qwert1', 'qwert2')\" );<br />\t\t}"},{"source":"/src/smallsql/junit/TestOther.java","value":3,"target":"&emsp;{<br />\t\t\tcon.createStatement().execute(\"Create Table TestInSelect (i counter, v varchar(20), n bigint, b boolean)\");<br />\t\t\tassertRowCount( 0, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into TestInSelect(v,b) Values('qwert1',true)\");<br />\t\t\tassertRowCount( 1, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );<br /><br />\t\t\tcon.createStatement().execute(\"Insert Into TestInSelect(v,b) Values('qwert1',true)\");<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect WHere i In (Select i from TestInSelect)\" );<br />\t\t\tassertRowCount( 1, \"Select * From TestInSelect WHere i In (Select i from TestInSelect Where i>1)\" );<br />\t\t\tassertRowCount( 1, \"Select * From TestInSelect Where i IN ( 1, 1, 12345, 987654321)\" );<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where v IN ( null, '', 'qwert1', 'qwert1')\" );<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where v IN ( 'qwert1')\" );<br />\t\t\tassertRowCount( 0, \"Select * From TestInSelect Where '' IN ( 'qwert1')\" );<br />\t\t\tassertRowCount( 2, \"Select * From TestInSelect Where 'qwert1' IN ( 'qwert1', 'qwert2')\" );<br />\t\t}"},{"source":"/src/smallsql/junit/BenchTest.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;&emsp;&emsp;// There are not the correct count of rows.<br />&emsp;&emsp;&emsp;&emsp;if (count == 0){<br />&emsp;&emsp;&emsp;&emsp;&emsp;createTestDataWithClassicInsert( con );<br />&emsp;&emsp;&emsp;&emsp;&emsp;rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br />&emsp;&emsp;&emsp;&emsp;&emsp;rs.next();<br />&emsp;&emsp;&emsp;&emsp;&emsp;count = rs.getInt(1);<br />&emsp;&emsp;&emsp;&emsp;}<br />&emsp;&emsp;&emsp;&emsp;if (count != rowCount){<br />&emsp;&emsp;&emsp;&emsp;&emsp;System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");<br />&emsp;&emsp;&emsp;&emsp;&emsp;return;<br />&emsp;&emsp;&emsp;&emsp;}<br />&emsp;&emsp;&emsp;}"},{"source":"/src/smallsql/junit/BenchTest.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;&emsp;&emsp;// There are not the correct count of rows.<br />&emsp;&emsp;&emsp;&emsp;if (count == 0){<br />&emsp;&emsp;&emsp;&emsp;&emsp;createTestDataWithClassicInsert( con );<br />&emsp;&emsp;&emsp;&emsp;&emsp;rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);<br />&emsp;&emsp;&emsp;&emsp;&emsp;rs.next();<br />&emsp;&emsp;&emsp;&emsp;&emsp;count = rs.getInt(1);<br />&emsp;&emsp;&emsp;&emsp;}<br />&emsp;&emsp;&emsp;&emsp;if (count != rowCount){<br />&emsp;&emsp;&emsp;&emsp;&emsp;System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");<br />&emsp;&emsp;&emsp;&emsp;&emsp;return;<br />&emsp;&emsp;&emsp;&emsp;}<br />&emsp;&emsp;&emsp;}"},{"source":"/src/smallsql/database/Utils.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;byte[] result = new byte[8];<br />&emsp;&emsp;result[0] = (byte)(value >> 56);<br />&emsp;&emsp;result[1] = (byte)(value >> 48);<br />&emsp;&emsp;result[2] = (byte)(value >> 40);<br />&emsp;&emsp;result[3] = (byte)(value >> 32);<br />&emsp;&emsp;result[4] = (byte)(value >> 24);<br />&emsp;&emsp;result[5] = (byte)(value >> 16);<br />&emsp;&emsp;result[6] = (byte)(value >> 8);<br />&emsp;&emsp;result[7] = (byte)(value);<br />&emsp;&emsp;return result;<br />&emsp;}"},{"source":"/src/smallsql/database/Utils.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;byte[] result = new byte[8];<br />&emsp;&emsp;result[0] = (byte)(value >> 56);<br />&emsp;&emsp;result[1] = (byte)(value >> 48);<br />&emsp;&emsp;result[2] = (byte)(value >> 40);<br />&emsp;&emsp;result[3] = (byte)(value >> 32);<br />&emsp;&emsp;result[4] = (byte)(value >> 24);<br />&emsp;&emsp;result[5] = (byte)(value >> 16);<br />&emsp;&emsp;result[6] = (byte)(value >> 8);<br />&emsp;&emsp;result[7] = (byte)(value);<br />&emsp;&emsp;return result;<br />&emsp;}"},{"source":"/src/smallsql/database/MemoryStream.java","value":2,"target":"&emsp;{<br />\t\tverifyFreePufferSize(4);<br />\t\tpuffer[ offset++ ] = (byte)(value >> 24);<br />\t\tpuffer[ offset++ ] = (byte)(value >> 16);<br />\t\tpuffer[ offset++ ] = (byte)(value >> 8);<br />\t\tpuffer[ offset++ ] = (byte)(value);<br />\t}"},{"source":"/src/smallsql/database/MemoryStream.java","value":2,"target":"&emsp;{<br />\t\tverifyFreePufferSize(4);<br />\t\tpuffer[ offset++ ] = (byte)(value >> 24);<br />\t\tpuffer[ offset++ ] = (byte)(value >> 16);<br />\t\tpuffer[ offset++ ] = (byte)(value >> 8);<br />\t\tpuffer[ offset++ ] = (byte)(value);<br />\t}"},{"source":"/src/smallsql/database/Utils.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;StringBuffer buf = new StringBuffer(bytes.length << 1);<br />&emsp;&emsp;for(int i=0; i<bytes.length; i++){<br />&emsp;&emsp;&emsp;buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );<br />&emsp;&emsp;&emsp;buf.append( digits[ (bytes[i]&emsp; ) & 0x0F ] );<br />&emsp;&emsp;}<br />&emsp;&emsp;return buf.toString();<br />&emsp;}"},{"source":"/src/smallsql/junit/BasicTestCase.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;StringBuffer buf = new StringBuffer(bytes.length << 1);<br />&emsp;&emsp;for(int i=0; i<bytes.length; i++){<br />&emsp;&emsp;&emsp;buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );<br />&emsp;&emsp;&emsp;buf.append( digits[ (bytes[i]&emsp; ) & 0x0F ] );<br />&emsp;&emsp;}<br />&emsp;&emsp;return buf.toString();<br />&emsp;}"},{"source":"/src/smallsql/junit/TestOther.java","value":3,"target":"&emsp;{<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Create Table Like (c varchar(20))\");<br /><br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qwert1')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qwert2')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qwert2.5')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('awert1')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('awert2')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('awert3')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qweSGSGSrt1')\");<br />&emsp;&emsp;&emsp;<br />&emsp;&emsp;&emsp;assertRowCount( 2, \"Select * From Like Where c like 'qwert_'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 3, \"Select * From Like Where c like 'qwert%'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 2, \"Select * From Like Where c like 'qwert2%'\" );<br /><br />&emsp;&emsp;&emsp;assertRowCount( 6, \"Select * From Like Where c like '_wert%'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 2, \"Select * From Like Where c like 'qwe%rt1'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 3, \"Select * From Like Where c like 'qwe%rt_'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 7, \"Select * From Like Where c like '%_'\" );<br /><br />&emsp;&emsp;}"},{"source":"/src/smallsql/junit/TestOther.java","value":3,"target":"&emsp;{<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Create Table Like (c varchar(20))\");<br /><br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qwert1')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qwert2')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qwert2.5')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('awert1')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('awert2')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('awert3')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qweSGSGSrt1')\");<br />&emsp;&emsp;&emsp;<br />&emsp;&emsp;&emsp;assertRowCount( 2, \"Select * From Like Where c like 'qwert_'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 3, \"Select * From Like Where c like 'qwert%'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 2, \"Select * From Like Where c like 'qwert2%'\" );<br /><br />&emsp;&emsp;&emsp;assertRowCount( 6, \"Select * From Like Where c like '_wert%'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 2, \"Select * From Like Where c like 'qwe%rt1'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 3, \"Select * From Like Where c like 'qwe%rt_'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 7, \"Select * From Like Where c like '%_'\" );<br /><br />&emsp;&emsp;}"},{"source":"/src/smallsql/junit/TestOther.java","value":3,"target":"&emsp;{<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Create Table Like (c varchar(20))\");<br /><br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qwert1')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qwert2')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qwert2.5')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('awert1')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('awert2')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('awert3')\");<br />&emsp;&emsp;&emsp;con.createStatement().execute(\"Insert Into Like(c) Values('qweSGSGSrt1')\");<br />&emsp;&emsp;&emsp;<br />&emsp;&emsp;&emsp;assertRowCount( 2, \"Select * From Like Where c like 'qwert_'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 3, \"Select * From Like Where c like 'qwert%'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 2, \"Select * From Like Where c like 'qwert2%'\" );<br /><br />&emsp;&emsp;&emsp;assertRowCount( 6, \"Select * From Like Where c like '_wert%'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 2, \"Select * From Like Where c like 'qwe%rt1'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 3, \"Select * From Like Where c like 'qwe%rt_'\" );<br />&emsp;&emsp;&emsp;assertRowCount( 7, \"Select * From Like Where c like '%_'\" );<br /><br />&emsp;&emsp;}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":3,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tString oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by nv\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = rs.getString(\"nv\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = rs.getString(\"nv\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tassertTrue( String.CASE_INSENSITIVE_ORDER.compare( oldValue, rs.getString(\"nv\") ) <= 0 );<br />\t\t\toldValue = rs.getString(\"nv\");<br />\t\t\tcount++;<br />\t\t}<br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":3,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tString oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by nv\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = rs.getString(\"nv\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = rs.getString(\"nv\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tassertTrue( String.CASE_INSENSITIVE_ORDER.compare( oldValue, rs.getString(\"nv\") ) <= 0 );<br />\t\t\toldValue = rs.getString(\"nv\");<br />\t\t\tcount++;<br />\t\t}<br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":3,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tString oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by nv\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = rs.getString(\"nv\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = rs.getString(\"nv\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tassertTrue( String.CASE_INSENSITIVE_ORDER.compare( oldValue, rs.getString(\"nv\") ) <= 0 );<br />\t\t\toldValue = rs.getString(\"nv\");<br />\t\t\tcount++;<br />\t\t}<br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/database/MemoryStream.java","value":2,"target":"&emsp;{<br />\t\treturn ((data[ offset++ ] & 0xFF) << 8) | (data[ offset++ ] & 0xFF);<br />\t}"},{"source":"/src/smallsql/database/LongTreeList.java","value":2,"target":"&emsp;{<br />\t\treturn ((data[ offset++ ] & 0xFF) << 8) | (data[ offset++ ] & 0xFF);<br />\t}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":2,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tString oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v ASC\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = rs.getString(\"v\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = rs.getString(\"v\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tString newValue = rs.getString(\"v\");<br />\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );<br />\t\t\toldValue = newValue;<br />\t\t\tcount++;<br />\t\t}<br />\t\trs.close();<br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":2,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tString oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v ASC\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = rs.getString(\"v\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = rs.getString(\"v\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tString newValue = rs.getString(\"v\");<br />\t\t\tassertTrue( oldValue.compareTo( newValue ) < 0 );<br />\t\t\toldValue = newValue;<br />\t\t\tcount++;<br />\t\t}<br />\t\trs.close();<br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/junit/TestAlterTable2.java","value":3,"target":"&emsp;{<br />&emsp;&emsp;Connection con = AllTests.getConnection();<br />&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;st.execute(\"create table \"+table+\" (a varchar(2) unique)\");<br />&emsp;&emsp;st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");<br />&emsp;&emsp;ResultSet rs = st.executeQuery(\"Select * From \" + table);<br />&emsp;&emsp;assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );<br />&emsp;&emsp;rs = con.getMetaData().getIndexInfo( null, null, table, false, false );<br />&emsp;&emsp;assertRowCount( 2, rs );<br />&emsp;}"},{"source":"/src/smallsql/junit/TestAlterTable2.java","value":3,"target":"&emsp;{<br />&emsp;&emsp;Connection con = AllTests.getConnection();<br />&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;st.execute(\"create table \"+table+\" (a varchar(2) unique)\");<br />&emsp;&emsp;st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");<br />&emsp;&emsp;ResultSet rs = st.executeQuery(\"Select * From \" + table);<br />&emsp;&emsp;assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );<br />&emsp;&emsp;rs = con.getMetaData().getIndexInfo( null, null, table, false, false );<br />&emsp;&emsp;assertRowCount( 2, rs );<br />&emsp;}"},{"source":"/src/smallsql/junit/TestAlterTable2.java","value":3,"target":"&emsp;{<br />&emsp;&emsp;Connection con = AllTests.getConnection();<br />&emsp;&emsp;Statement st = con.createStatement();<br />&emsp;&emsp;st.execute(\"create table \"+table+\" (a varchar(2) unique)\");<br />&emsp;&emsp;st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");<br />&emsp;&emsp;ResultSet rs = st.executeQuery(\"Select * From \" + table);<br />&emsp;&emsp;assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );<br />&emsp;&emsp;rs = con.getMetaData().getIndexInfo( null, null, table, false, false );<br />&emsp;&emsp;assertRowCount( 2, rs );<br />&emsp;}"},{"source":"/src/smallsql/database/DataSources.java","value":7,"target":"&emsp;{<br />\t\tif (idx >= size)<br />\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br />\t\treturn data[idx];<br />\t}"},{"source":"/src/smallsql/database/Columns.java","value":7,"target":"&emsp;{<br />\t\tif (idx >= size)<br />\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br />\t\treturn data[idx];<br />\t}"},{"source":"/src/smallsql/database/ForeignKeys.java","value":7,"target":"&emsp;{<br />\t\tif (idx >= size)<br />\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br />\t\treturn data[idx];<br />\t}"},{"source":"/src/smallsql/database/LongList.java","value":7,"target":"&emsp;{<br />\t\tif (idx >= size)<br />\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br />\t\treturn data[idx];<br />\t}"},{"source":"/src/smallsql/database/Strings.java","value":7,"target":"&emsp;{<br />\t\tif (idx >= size)<br />\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br />\t\treturn data[idx];<br />\t}"},{"source":"/src/smallsql/database/Expressions.java","value":7,"target":"&emsp;{<br />\t\tif (idx >= size)<br />\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br />\t\treturn data[idx];<br />\t}"},{"source":"/src/smallsql/database/IndexDescriptions.java","value":7,"target":"&emsp;{<br />\t\tif (idx >= size)<br />\t\t\tthrow new IndexOutOfBoundsException(\"Column index: \"+idx+\", Size: \"+size);<br />\t\treturn data[idx];<br />\t}"},{"source":"/src/smallsql/database/StoreImpl.java","value":2,"target":"&emsp;{<br />&emsp;\tint newSize = offset + 4;<br />&emsp;&emsp;if(newSize > page.length) resizePage(newSize);<br /><br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 24);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 16);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 8);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value);<br />&emsp;}"},{"source":"/src/smallsql/database/StoreImpl.java","value":2,"target":"&emsp;{<br />&emsp;\tint newSize = offset + 4;<br />&emsp;&emsp;if(newSize > page.length) resizePage(newSize);<br /><br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 24);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 16);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 8);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value);<br />&emsp;}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":2,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tInteger oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = (Integer)rs.getObject(\"i\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = (Integer)rs.getObject(\"i\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br />\t\t\toldValue = (Integer)rs.getObject(\"i\");<br />\t\t\tcount++;<br />\t\t}<br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":2,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tInteger oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = (Integer)rs.getObject(\"i\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = (Integer)rs.getObject(\"i\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );<br />\t\t\toldValue = (Integer)rs.getObject(\"i\");<br />\t\t\tcount++;<br />\t\t}<br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/database/Table.java","value":3,"target":"&emsp;{<br />\t\t\t\t\t\t\tIterator values = locks.values().iterator();<br />\t\t\t\t\t\t\twhile(values.hasNext()){<br />\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();<br />\t\t\t\t\t\t\t\tif(lock.con != con) return null;<br />\t\t\t\t\t\t\t}<br />\t\t\t\t\t\t}"},{"source":"/src/smallsql/database/Table.java","value":3,"target":"&emsp;{<br />\t\t\t\t\t\t\tIterator values = locks.values().iterator();<br />\t\t\t\t\t\t\twhile(values.hasNext()){<br />\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();<br />\t\t\t\t\t\t\t\tif(lock.con != con) return null;<br />\t\t\t\t\t\t\t}<br />\t\t\t\t\t\t}"},{"source":"/src/smallsql/database/Table.java","value":3,"target":"&emsp;{<br />\t\t\t\t\t\t\tIterator values = locks.values().iterator();<br />\t\t\t\t\t\t\twhile(values.hasNext()){<br />\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();<br />\t\t\t\t\t\t\t\tif(lock.con != con) return null;<br />\t\t\t\t\t\t\t}<br />\t\t\t\t\t\t}"},{"source":"/src/smallsql/junit/TestTransactions.java","value":2,"target":"&emsp;{\t\t\t<br />\t\t\tcon.setAutoCommit(false);<br />\t\t\tcon.createStatement().execute(\"Create Table transactions ( v varchar(20))\");<br />\t\t\tassertRowCount( 0, \"Select * from transactions\");<br /><br />\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\") );<br />\t\t\tassertEqualsRsValue(\"qwert\", \"Select * from transactions\");<br />\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br />\t\t\t<br />\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\") );<br />\t\t\tassertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br />\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br />\t\t\t<br />&emsp;&emsp;&emsp;assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\") );<br />&emsp;&emsp;&emsp;assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br />&emsp;&emsp;&emsp;assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br />&emsp;&emsp;&emsp;<br />\t\t\tSavepoint savepoint = con.setSavepoint();<br />\t\t\t<br />\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\") );<br />\t\t\tassertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br />\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br /><br />\t\t\tcon.rollback( savepoint );<br />\t\t\t<br />\t\t\tcon.commit();<br />\t\t\tassertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br />\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br />\t\t}"},{"source":"/src/smallsql/junit/TestTransactions.java","value":2,"target":"&emsp;{\t\t\t<br />\t\t\tcon.setAutoCommit(false);<br />\t\t\tcon.createStatement().execute(\"Create Table transactions ( v varchar(20))\");<br />\t\t\tassertRowCount( 0, \"Select * from transactions\");<br /><br />\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Insert Into transactions(v) Values('qwert')\") );<br />\t\t\tassertEqualsRsValue(\"qwert\", \"Select * from transactions\");<br />\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br />\t\t\t<br />\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert1'\") );<br />\t\t\tassertEqualsRsValue(\"qwert1\", \"Select * from transactions\");<br />\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br />\t\t\t<br />&emsp;&emsp;&emsp;assertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert2'\") );<br />&emsp;&emsp;&emsp;assertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br />&emsp;&emsp;&emsp;assertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br />&emsp;&emsp;&emsp;<br />\t\t\tSavepoint savepoint = con.setSavepoint();<br />\t\t\t<br />\t\t\tassertEquals( 1, con.createStatement().executeUpdate(\"Update transactions set v='qwert 3'\") );<br />\t\t\tassertEqualsRsValue(\"qwert 3\", \"Select * from transactions\");<br />\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br /><br />\t\t\tcon.rollback( savepoint );<br />\t\t\t<br />\t\t\tcon.commit();<br />\t\t\tassertEqualsRsValue(\"qwert2\", \"Select * from transactions\");<br />\t\t\tassertEqualsRsValue(new Integer(1), \"Select count(*) from transactions\");<br />\t\t}"},{"source":"/src/smallsql/database/StoreImpl.java","value":2,"target":"&emsp;{<br />&emsp;\tint newSize = offset + 8;<br />&emsp;&emsp;if(newSize > page.length) resizePage(newSize);<br /><br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 56);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 48);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 40);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 32);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 24);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 16);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 8);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value);<br />&emsp;}"},{"source":"/src/smallsql/database/StoreImpl.java","value":2,"target":"&emsp;{<br />&emsp;\tint newSize = offset + 8;<br />&emsp;&emsp;if(newSize > page.length) resizePage(newSize);<br /><br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 56);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 48);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 40);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 32);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 24);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 16);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value >> 8);<br />&emsp;&emsp;page[ offset++ ] = (byte)(value);<br />&emsp;}"},{"source":"/src/smallsql/database/SSCallableStatement.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;Expression expr = getValue(i);<br />&emsp;&emsp;&emsp;wasNull = expr.isNull();<br />&emsp;&emsp;&emsp;return expr.getLong();<br />&emsp;&emsp;}catch(Exception e){<br />&emsp;&emsp;&emsp;throw SmallSQLException.createFromException( e );<br />&emsp;&emsp;}<br />&emsp;}"},{"source":"/src/smallsql/database/SSCallableStatement.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;Expression expr = getValue(i);<br />&emsp;&emsp;&emsp;wasNull = expr.isNull();<br />&emsp;&emsp;&emsp;return expr.getLong();<br />&emsp;&emsp;}catch(Exception e){<br />&emsp;&emsp;&emsp;throw SmallSQLException.createFromException( e );<br />&emsp;&emsp;}<br />&emsp;}"},{"source":"/src/smallsql/database/MutableNumeric.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;&emsp;&emsp;// overflow Integer Value<br />&emsp;&emsp;&emsp;&emsp;long temp = value[0] & 0xFFFFFFFFL;<br />&emsp;&emsp;&emsp;&emsp;return temp / scaleDoubleFactor[scale] * signum;<br />&emsp;&emsp;&emsp;}"},{"source":"/src/smallsql/database/MutableNumeric.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;&emsp;&emsp;// overflow Integer Value<br />&emsp;&emsp;&emsp;&emsp;long temp = value[0] & 0xFFFFFFFFL;<br />&emsp;&emsp;&emsp;&emsp;return temp / scaleDoubleFactor[scale] * signum;<br />&emsp;&emsp;&emsp;}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":2,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tString oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = rs.getString(\"v\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = rs.getString(\"v\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tString newValue = rs.getString(\"v\");<br />\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );<br />\t\t\toldValue = newValue;<br />\t\t\tcount++;<br />\t\t}<br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/junit/TestOrderBy.java","value":2,"target":"&emsp;{<br />\t\tinit();<br />\t\tConnection con = AllTests.getConnection();<br />\t\tStatement st = con.createStatement();<br />\t\tResultSet rs;<br />\t\tString oldValue;<br />\t\t<br />\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");<br />\t\t<br />\t\tassertTrue( rs.next() );<br />\t\t<br />\t\toldValue = rs.getString(\"v\");<br />\t\tassertNull(oldValue);<br />\t\tassertTrue( rs.next() );<br />\t\toldValue = rs.getString(\"v\");<br />\t\t<br />\t\tint count = 1;<br />\t\twhile(rs.next()){<br />\t\t\tString newValue = rs.getString(\"v\");<br />\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );<br />\t\t\toldValue = newValue;<br />\t\t\tcount++;<br />\t\t}<br />\t\tassertEquals( valueCount, count );<br />\t}"},{"source":"/src/smallsql/database/Utils.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;return Double.parseDouble( val ) != 0;<br />&emsp;&emsp;}catch(NumberFormatException e){/*ignore it if it not a number*/}<br />&emsp;&emsp;return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );<br />&emsp;}"},{"source":"/src/smallsql/junit/BasicTestCase.java","value":2,"target":"&emsp;{<br />&emsp;&emsp;try{<br />&emsp;&emsp;&emsp;return Double.parseDouble( val ) != 0;<br />&emsp;&emsp;}catch(NumberFormatException e){/*ignore it if it not a number*/}<br />&emsp;&emsp;return \"true\".equalsIgnoreCase( val ) || \"yes\".equalsIgnoreCase( val ) || \"t\".equalsIgnoreCase( val );<br />&emsp;}"}]}